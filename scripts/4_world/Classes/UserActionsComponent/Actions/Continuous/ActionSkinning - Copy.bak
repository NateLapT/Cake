modded class ActionSkinning
{	
	override void OnFinishProgressServer(ActionData action_data)
	{
		super.OnFinishProgressServer(action_data);
		
		Object targetObject = action_data.m_Target.GetObject();
		
		// Mark the body as skinned to forbid another skinning action on it
		EntityAI body = EntityAI.Cast(targetObject);
		body.SetAsSkinned();
		
		MiscGameplayFunctions.RemoveAllAttachedChildrenByTypename(body, {Bolt_Base});
		
		HandlePlayerBody(action_data);
		SpawnItems(action_data);
		
		if (body)
		{
			GetGame().GetCallQueue(CALL_CATEGORY_SYSTEM).Call(GetGame().ObjectDelete,body);
		}
		
		MiscGameplayFunctions.DealAbsoluteDmg(action_data.m_MainItem, UADamageApplied.SKINNING);
		
		PluginLifespan moduleLifespan = PluginLifespan.Cast(GetPlugin(PluginLifespan));
		moduleLifespan.UpdateBloodyHandsVisibility(action_data.m_Player, true);
		action_data.m_Player.GetSoftSkillsManager().AddSpecialty(m_SpecialtyWeight);
	}
	
	vector GetRandomPos(vector body_pos)
	{
		return body_pos + Vector(Math.RandomFloat01() - 0.5, 0, Math.RandomFloat01() - 0.5);
	}
	
	// Spawns an organ defined in the given config
	ItemBase CreateOrgan(PlayerBase player, vector body_pos, string item_to_spawn, string cfg_skinning_organ_class, ItemBase tool)
	{
		// Create item from config
		ItemBase added_item;
		vector pos_rnd = GetRandomPos(body_pos);
		Class.CastTo(added_item,  GetGame().CreateObjectEx(item_to_spawn, pos_rnd, ECE_PLACE_ON_SURFACE | ECE_INITAI));
		
		// Check if skinning is configured for this body
		if (!added_item)
			return null;
		
		// Set randomized position
		// added_item.PlaceOnSurface();
		
		// Set item's quantity from config, if it's defined there.
		// float item_quantity = 0;
		// array<float> quant_min_max = new array<float>;
		// array<float> quant_min_max_coef = new array<float>;
		
		// GetGame().ConfigGetFloatArray(cfg_skinning_organ_class + "quantityMinMax", quant_min_max);
		// GetGame().ConfigGetFloatArray(cfg_skinning_organ_class + "quantityMinMaxCoef", quant_min_max_coef);
		
		
		// Read config for quantity value
		// if (quant_min_max.Count() > 0)
		// {
			// float soft_skill_manipulated_value = (quant_min_max.Get(0)+ quant_min_max.Get(1)) / 2;
			// float min_quantity = player.GetSoftSkillsManager().AddSpecialtyBonus(soft_skill_manipulated_value, this.GetSpecialtyWeight());
			// item_quantity = Math.RandomFloat(min_quantity, quant_min_max.Get(1));
		// }
		
		// if (quant_min_max_coef.Count() > 0)
		// {
			// float coef = Math.RandomFloat(quant_min_max_coef.Get(0), quant_min_max_coef.Get(1));
			// item_quantity = added_item.GetQuantityMax() * coef;
		// }
		
		// if (GetGame().ConfigGetFloat(cfg_skinning_organ_class + "quantity") > 0)
			// item_quantity = g_Game.ConfigGetFloat(cfg_skinning_organ_class + "quantity");
		
		// if (GetGame().ConfigGetFloat(cfg_skinning_organ_class + "quantityCoef") > 0)
		// {
			// float coef2 = g_Game.ConfigGetFloat(cfg_skinning_organ_class + "quantityCoef");
			// item_quantity = added_item.GetQuantityMax() * coef2;
		// }
		
		// if (item_quantity > 0)
		// {
			// item_quantity = Math.Round(item_quantity);
			// added_item.SetQuantity(item_quantity, false);
		// }
		
		// Transfer tool's damage to the item's condition
		// float item_apply_tool_damage_coef = GetGame().ConfigGetFloat(cfg_skinning_organ_class + "transferToolDamageCoef");
		
		// if (item_apply_tool_damage_coef > 0)
		// {
			// float tool_dmg_coef = 1 - tool.GetHealth01();
			// float organ_dmg_coef = tool_dmg_coef * item_apply_tool_damage_coef;
			// added_item.DecreaseHealthCoef(organ_dmg_coef);
		// }
		
		// added_item.InsertAgent(eAgents.SALMONELLA, 1);
		 return added_item;
	 }
	

}
